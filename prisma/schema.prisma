
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MainPage {
  id        String  @id @default(uuid())
  published Boolean
  title     String  @unique
  slug      String  @unique
  content   String
}

model Bio {
  id        String  @id @default(uuid())
  published Boolean
  title     String  @unique
  slug      String  @unique
  image     String
  thumbnail String
  epigraph  String
  content   String
}

model File {
  id         String   @id @default(uuid())
  name       String?
  uniqueName String?
  url        String?
  thumbnail  String?
  fileType   String?
  createdAt  DateTime @default(now())
}

model Section {
  id        String    @id @default(uuid())
  published Boolean
  order     Int       @unique
  title     String    @unique
  slug      String    @unique
  subtitle  String
  createdAt DateTime  @default(now())
  image     String
  thumbnail String
  altTitle  String
  content   String
  projects  Project[]
}

model Project {
  id               String   @id @default(uuid())
  published        Boolean
  sectionId        String?
  section          Section? @relation(fields: [sectionId], references: [id])
  title            String   @unique
  slug             String   @unique
  createdAt        DateTime @default(now())
  preview          String
  previewThumbnail String
  image            String
  thumbnail        String
  subtitle         String
  content          String
}

model Social {
  id    String @id @default(uuid())
  icon  String
  title String @unique
  link  String
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
